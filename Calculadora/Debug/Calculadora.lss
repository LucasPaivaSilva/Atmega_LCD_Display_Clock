
Calculadora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000e52  00000ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800146  00800146  00000f2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191b  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000909  00000000  00000000  00002927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b88  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00003db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf0  00000000  00000000  0000436e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  68:	77 04       	cpc	r7, r7
  6a:	65 04       	cpc	r6, r5
  6c:	89 04       	cpc	r8, r9
  6e:	89 04       	cpc	r8, r9
  70:	89 04       	cpc	r8, r9
  72:	89 04       	cpc	r8, r9
  74:	89 04       	cpc	r8, r9
  76:	de 01       	movw	r26, r28
  78:	f9 01       	movw	r30, r18
  7a:	14 02       	muls	r17, r20
  7c:	89 04       	cpc	r8, r9
  7e:	89 04       	cpc	r8, r9
  80:	89 04       	cpc	r8, r9
  82:	89 04       	cpc	r8, r9
  84:	89 04       	cpc	r8, r9
  86:	89 04       	cpc	r8, r9
  88:	89 04       	cpc	r8, r9
  8a:	89 04       	cpc	r8, r9
  8c:	89 04       	cpc	r8, r9
  8e:	89 04       	cpc	r8, r9
  90:	74 01       	movw	r14, r8
  92:	2f 02       	muls	r18, r31
  94:	89 04       	cpc	r8, r9
  96:	89 04       	cpc	r8, r9
  98:	89 04       	cpc	r8, r9
  9a:	89 04       	cpc	r8, r9
  9c:	89 04       	cpc	r8, r9
  9e:	89 04       	cpc	r8, r9
  a0:	89 04       	cpc	r8, r9
  a2:	a8 01       	movw	r20, r16
  a4:	89 04       	cpc	r8, r9
  a6:	43 04       	cpc	r4, r3
  a8:	c3 01       	movw	r24, r6
  aa:	89 04       	cpc	r8, r9
  ac:	89 04       	cpc	r8, r9
  ae:	89 04       	cpc	r8, r9
  b0:	8d 01       	movw	r16, r26
  b2:	96 03       	fmuls	r17, r22
  b4:	38 03       	fmul	r19, r16
  b6:	f2 03       	fmuls	r23, r18
  b8:	e7 02       	muls	r30, r23
  ba:	40 02       	muls	r20, r16
  bc:	73 02       	muls	r23, r19
  be:	a6 02       	muls	r26, r22

000000c0 <__ctors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	d8 e0       	ldi	r29, 0x08	; 8
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
  cc:	11 e0       	ldi	r17, 0x01	; 1
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	e2 e5       	ldi	r30, 0x52	; 82
  d4:	fe e0       	ldi	r31, 0x0E	; 14
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
  d8:	05 90       	lpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a6 34       	cpi	r26, 0x46	; 70
  de:	b1 07       	cpc	r27, r17
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	a6 e4       	ldi	r26, 0x46	; 70
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	af 35       	cpi	r26, 0x5F	; 95
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	0e 94 9c 05 	call	0xb38	; 0xb38 <main>
  f6:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <cmd_LCD>:
//---------------------------------------------------------------------------------------------
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)				//c é o dado  e cd indica se é instrução ou caractere
{
	if(cd==0)
  fe:	61 11       	cpse	r22, r1
 100:	02 c0       	rjmp	.+4      	; 0x106 <cmd_LCD+0x8>
		clr_bit(CONTR_LCD,RS);
 102:	45 98       	cbi	0x08, 5	; 8
 104:	01 c0       	rjmp	.+2      	; 0x108 <cmd_LCD+0xa>
	else
		set_bit(CONTR_LCD,RS);
 106:	45 9a       	sbi	0x08, 5	; 8

	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F)|(0xF0 & c);		
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	
 108:	98 b1       	in	r25, 0x08	; 8
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	28 2f       	mov	r18, r24
 10e:	22 95       	swap	r18
 110:	2f 70       	andi	r18, 0x0F	; 15
 112:	92 2b       	or	r25, r18
 114:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	95 e0       	ldi	r25, 0x05	; 5
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <cmd_LCD+0x1a>
 11c:	00 00       	nop
	#endif
	
	pulso_enable();
 11e:	44 9a       	sbi	0x08, 4	; 8
 120:	95 e0       	ldi	r25, 0x05	; 5
 122:	9a 95       	dec	r25
 124:	f1 f7       	brne	.-4      	; 0x122 <cmd_LCD+0x24>
 126:	00 00       	nop
 128:	44 98       	cbi	0x08, 4	; 8
 12a:	90 ef       	ldi	r25, 0xF0	; 240
 12c:	9a 95       	dec	r25
 12e:	f1 f7       	brne	.-4      	; 0x12c <cmd_LCD+0x2e>

	//segundo nibble de dados - 4 LSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c<<4));		
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
 130:	98 b1       	in	r25, 0x08	; 8
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	28 2f       	mov	r18, r24
 136:	2f 70       	andi	r18, 0x0F	; 15
 138:	92 2b       	or	r25, r18
 13a:	98 b9       	out	0x08, r25	; 8
 13c:	95 e0       	ldi	r25, 0x05	; 5
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <cmd_LCD+0x40>
 142:	00 00       	nop
	#endif
	
	pulso_enable();
 144:	44 9a       	sbi	0x08, 4	; 8
 146:	95 e0       	ldi	r25, 0x05	; 5
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <cmd_LCD+0x4a>
 14c:	00 00       	nop
 14e:	44 98       	cbi	0x08, 4	; 8
 150:	90 ef       	ldi	r25, 0xF0	; 240
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <cmd_LCD+0x54>
	
	if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza espera LCD estar pronto
 156:	61 11       	cpse	r22, r1
 158:	08 c0       	rjmp	.+16     	; 0x16a <cmd_LCD+0x6c>
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	30 f4       	brcc	.+12     	; 0x16a <cmd_LCD+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9f e1       	ldi	r25, 0x1F	; 31
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <cmd_LCD+0x64>
 166:	00 c0       	rjmp	.+0      	; 0x168 <cmd_LCD+0x6a>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void inic_LCD_4bits()		//sequência ditada pelo fabricando do circuito integrado HD44780
{							//o LCD será só escrito. Então, R/W é sempre zero.

	clr_bit(CONTR_LCD,RS);	//RS em zero indicando que o dado para o LCD será uma instrução	
 16c:	45 98       	cbi	0x08, 5	; 8
	clr_bit(CONTR_LCD,E);	//pino de habilitação em zero
 16e:	44 98       	cbi	0x08, 4	; 8
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 ef       	ldi	r24, 0xF9	; 249
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <inic_LCD_4bits+0xa>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <inic_LCD_4bits+0x14>
 180:	00 00       	nop
							//ser maior). 
	//interface de 8 bits						
	#if (nibble_dados)
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;		
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;		
 182:	88 b1       	in	r24, 0x08	; 8
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	83 60       	ori	r24, 0x03	; 3
 188:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	25 e0       	ldi	r18, 0x05	; 5
 18c:	2a 95       	dec	r18
 18e:	f1 f7       	brne	.-4      	; 0x18c <inic_LCD_4bits+0x20>
 190:	00 00       	nop
	#endif						
							
	pulso_enable();			//habilitação respeitando os tempos de resposta do LCD
 192:	44 9a       	sbi	0x08, 4	; 8
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <inic_LCD_4bits+0x2a>
 19a:	00 00       	nop
 19c:	44 98       	cbi	0x08, 4	; 8
 19e:	90 ef       	ldi	r25, 0xF0	; 240
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <inic_LCD_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	9e e4       	ldi	r25, 0x4E	; 78
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <inic_LCD_4bits+0x3c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <inic_LCD_4bits+0x42>
 1ae:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	95 e0       	ldi	r25, 0x05	; 5
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <inic_LCD_4bits+0x46>
 1b6:	00 00       	nop
	_delay_ms(5);		
	pulso_enable();
 1b8:	44 9a       	sbi	0x08, 4	; 8
 1ba:	25 e0       	ldi	r18, 0x05	; 5
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <inic_LCD_4bits+0x50>
 1c0:	00 00       	nop
 1c2:	44 98       	cbi	0x08, 4	; 8
 1c4:	80 ef       	ldi	r24, 0xF0	; 240
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <inic_LCD_4bits+0x5a>
 1ca:	8f e1       	ldi	r24, 0x1F	; 31
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <inic_LCD_4bits+0x62>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <inic_LCD_4bits+0x68>
 1d4:	00 00       	nop
 1d6:	95 e0       	ldi	r25, 0x05	; 5
 1d8:	9a 95       	dec	r25
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <inic_LCD_4bits+0x6c>
 1dc:	00 00       	nop
	_delay_us(200);
	pulso_enable();	/*até aqui ainda é uma interface de 8 bits.
 1de:	44 9a       	sbi	0x08, 4	; 8
 1e0:	25 e0       	ldi	r18, 0x05	; 5
 1e2:	2a 95       	dec	r18
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <inic_LCD_4bits+0x76>
 1e6:	00 00       	nop
 1e8:	44 98       	cbi	0x08, 4	; 8
 1ea:	80 ef       	ldi	r24, 0xF0	; 240
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <inic_LCD_4bits+0x80>
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados) 
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;		
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	95 e0       	ldi	r25, 0x05	; 5
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <inic_LCD_4bits+0x8e>
 1fe:	00 00       	nop
	#endif
	
	pulso_enable();		
 200:	44 9a       	sbi	0x08, 4	; 8
 202:	25 e0       	ldi	r18, 0x05	; 5
 204:	2a 95       	dec	r18
 206:	f1 f7       	brne	.-4      	; 0x204 <inic_LCD_4bits+0x98>
 208:	00 00       	nop
 20a:	44 98       	cbi	0x08, 4	; 8
 20c:	80 ef       	ldi	r24, 0xF0	; 240
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <inic_LCD_4bits+0xa2>
   	cmd_LCD(0x28,0); 		//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
							//são enviados os 2 nibbles (0x2 e 0x8)
   	cmd_LCD(0x08,0);		//desliga o display
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
   	cmd_LCD(0x01,0);		//limpa todo o display
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
   	cmd_LCD(0x0C,0);		//mensagem aparente cursor inativo não piscando   
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
   	cmd_LCD(0x80,0);		//inicializa cursor na primeira posição a esquerda - 1a linha
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
 23a:	08 95       	ret

0000023c <escreve_LCD>:
}
//---------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD -  dados armazenados na RAM
//---------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) cmd_LCD(*c,1);
 242:	88 81       	ld	r24, Y
 244:	88 23       	and	r24, r24
 246:	39 f0       	breq	.+14     	; 0x256 <escreve_LCD+0x1a>
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
 250:	89 91       	ld	r24, Y+
 252:	81 11       	cpse	r24, r1
 254:	fa cf       	rjmp	.-12     	; 0x24a <escreve_LCD+0xe>
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <ul2binstr>:
int DigitCount = 8;
int First_Second_Switch = 0;
int OperationState = 0;

char *ul2binstr(unsigned long num, char *s, size_t len)
{
 25c:	da 01       	movw	r26, r20
	if (0 == len) {
 25e:	21 15       	cp	r18, r1
 260:	31 05       	cpc	r19, r1
 262:	31 f0       	breq	.+12     	; 0x270 <ul2binstr+0x14>
		} else {
		s[--len] = '\0';
 264:	21 50       	subi	r18, 0x01	; 1
 266:	31 09       	sbc	r19, r1
 268:	fa 01       	movw	r30, r20
 26a:	e2 0f       	add	r30, r18
 26c:	f3 1f       	adc	r31, r19
 26e:	10 82       	st	Z, r1
	}

	do {
		if (0 == len) {
 270:	21 15       	cp	r18, r1
 272:	31 05       	cpc	r19, r1
 274:	59 f0       	breq	.+22     	; 0x28c <ul2binstr+0x30>
			} else {
			s[--len] = ((num & 1) ? '1' : '0');
 276:	21 50       	subi	r18, 0x01	; 1
 278:	31 09       	sbc	r19, r1
 27a:	fd 01       	movw	r30, r26
 27c:	e2 0f       	add	r30, r18
 27e:	f3 1f       	adc	r31, r19
 280:	60 fd       	sbrc	r22, 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <ul2binstr+0x2c>
 284:	50 e3       	ldi	r21, 0x30	; 48
 286:	01 c0       	rjmp	.+2      	; 0x28a <ul2binstr+0x2e>
 288:	51 e3       	ldi	r21, 0x31	; 49
 28a:	50 83       	st	Z, r21
		}
	} while ((num >>= 1) != 0);
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	77 95       	ror	r23
 292:	67 95       	ror	r22
 294:	61 15       	cp	r22, r1
 296:	71 05       	cpc	r23, r1
 298:	81 05       	cpc	r24, r1
 29a:	91 05       	cpc	r25, r1
 29c:	49 f7       	brne	.-46     	; 0x270 <ul2binstr+0x14>

	return s + len;
}
 29e:	cd 01       	movw	r24, r26
 2a0:	82 0f       	add	r24, r18
 2a2:	93 1f       	adc	r25, r19
 2a4:	08 95       	ret

000002a6 <Calculator>:

void Calculator(char digit, int KeypadInput)
{
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
	if (KeypadInput == 1)
 2b6:	61 30       	cpi	r22, 0x01	; 1
 2b8:	71 05       	cpc	r23, r1
 2ba:	09 f0       	breq	.+2      	; 0x2be <Calculator+0x18>
 2bc:	2a c3       	rjmp	.+1620   	; 0x912 <__stack+0x13>
	{
		DigitCount--;
 2be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <DigitCount>
 2c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <DigitCount+0x1>
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	31 09       	sbc	r19, r1
 2ca:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <DigitCount+0x1>
 2ce:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <DigitCount>
		switch (digit)
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	f0 97       	sbiw	r30, 0x30	; 48
 2d8:	e5 32       	cpi	r30, 0x25	; 37
 2da:	f1 05       	cpc	r31, r1
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <Calculator+0x3a>
 2de:	19 c3       	rjmp	.+1586   	; 0x912 <__stack+0x13>
 2e0:	ec 5c       	subi	r30, 0xCC	; 204
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__tablejump2__>
		{
			case 'D':
			cmd_LCD(0x8D, 0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	8d e8       	ldi	r24, 0x8D	; 141
 2ec:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('/', 1);
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	8f e2       	ldi	r24, 0x2F	; 47
 2f4:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 300:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 1;
 304:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 308:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 30c:	88 e0       	ldi	r24, 0x08	; 8
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 318:	2e c3       	rjmp	.+1628   	; 0x976 <__stack+0x77>

			case 'T':
			cmd_LCD(0x8D, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	8d e8       	ldi	r24, 0x8D	; 141
 31e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('*', 1);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	8a e2       	ldi	r24, 0x2A	; 42
 326:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 332:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 2;
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 33e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 342:	88 e0       	ldi	r24, 0x08	; 8
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 34e:	13 c3       	rjmp	.+1574   	; 0x976 <__stack+0x77>
		
			case 'M':
			cmd_LCD(0x8D, 0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	8d e8       	ldi	r24, 0x8D	; 141
 354:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('-', 1);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	8d e2       	ldi	r24, 0x2D	; 45
 35c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 368:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 3;
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 374:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 380:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 384:	f8 c2       	rjmp	.+1520   	; 0x976 <__stack+0x77>

			case 'P':
			cmd_LCD(0x8D, 0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	8d e8       	ldi	r24, 0x8D	; 141
 38a:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('+', 1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	8b e2       	ldi	r24, 0x2B	; 43
 392:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 39e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 4;
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 3aa:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 3b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 3ba:	dd c2       	rjmp	.+1466   	; 0x976 <__stack+0x77>
			
			case '7':
			cmd_LCD(0x8D, 0);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	8d e8       	ldi	r24, 0x8D	; 141
 3c0:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('E', 1);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	85 e4       	ldi	r24, 0x45	; 69
 3c8:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 3d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 5;
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 3e0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 3e4:	88 e0       	ldi	r24, 0x08	; 8
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 3ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 3f0:	c2 c2       	rjmp	.+1412   	; 0x976 <__stack+0x77>
			
			case '8':
			cmd_LCD(0x8D, 0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	8d e8       	ldi	r24, 0x8D	; 141
 3f6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('O', 1);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8f e4       	ldi	r24, 0x4F	; 79
 3fe:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 40a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 6;
 40e:	86 e0       	ldi	r24, 0x06	; 6
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 416:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 422:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 426:	a7 c2       	rjmp	.+1358   	; 0x976 <__stack+0x77>
			
			case '9':
			cmd_LCD(0x8D, 0);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	8d e8       	ldi	r24, 0x8D	; 141
 42c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			cmd_LCD('X', 1);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	88 e5       	ldi	r24, 0x58	; 88
 434:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			First_Second_Switch = 1;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 440:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
			OperationState = 7;
 444:	87 e0       	ldi	r24, 0x07	; 7
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 44c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			DigitCount = 8;
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 458:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 45c:	8c c2       	rjmp	.+1304   	; 0x976 <__stack+0x77>
			
			case 'E':
			cmd_LCD(1,0);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
			switch (OperationState)
 466:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <__data_end>
 46a:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <__data_end+0x1>
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	e7 30       	cpi	r30, 0x07	; 7
 472:	f1 05       	cpc	r31, r1
 474:	08 f0       	brcs	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 476:	4d c2       	rjmp	.+1178   	; 0x912 <__stack+0x13>
 478:	e7 5a       	subi	r30, 0xA7	; 167
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__tablejump2__>
 480:	a4 e1       	ldi	r26, 0x14	; 20
 482:	b1 e0       	ldi	r27, 0x01	; 1
 484:	cc e0       	ldi	r28, 0x0C	; 12
 486:	d1 e0       	ldi	r29, 0x01	; 1
 488:	e2 e0       	ldi	r30, 0x02	; 2
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	4c e1       	ldi	r20, 0x1C	; 28
 48e:	51 e0       	ldi	r21, 0x01	; 1
					{
						final_digits[k] = '1';
					} 
					else
					{
						final_digits[k] = '0';
 490:	60 e3       	ldi	r22, 0x30	; 48
				{
					VT1 = first_digits[k] - '0';
					VT2 = secon_digits[k] - '0';
					if (VT1==1 && VT2==1)
					{
						final_digits[k] = '1';
 492:	71 e3       	ldi	r23, 0x31	; 49
			switch (OperationState)
			{
				case 5:
				for (k=0; k<8;k++)
				{
					VT1 = first_digits[k] - '0';
 494:	8d 91       	ld	r24, X+
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	c0 97       	sbiw	r24, 0x30	; 48
					VT2 = secon_digits[k] - '0';
 49a:	29 91       	ld	r18, Y+
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	20 53       	subi	r18, 0x30	; 48
 4a0:	31 09       	sbc	r19, r1
					if (VT1==1 && VT2==1)
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	91 05       	cpc	r25, r1
 4a6:	29 f4       	brne	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a8:	21 30       	cpi	r18, 0x01	; 1
 4aa:	31 05       	cpc	r19, r1
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
					{
						final_digits[k] = '1';
 4ae:	70 83       	st	Z, r23
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
					} 
					else
					{
						final_digits[k] = '0';
 4b2:	60 83       	st	Z, r22
 4b4:	31 96       	adiw	r30, 0x01	; 1
			case 'E':
			cmd_LCD(1,0);
			switch (OperationState)
			{
				case 5:
				for (k=0; k<8;k++)
 4b6:	a4 17       	cp	r26, r20
 4b8:	b5 07       	cpc	r27, r21
 4ba:	61 f7       	brne	.-40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 4bc:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <VT1+0x1>
 4c0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <VT1>
 4c4:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <VT2+0x1>
 4c8:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <VT2>
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 4d4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
					else
					{
						final_digits[k] = '0';
					}
				}
				First_Second_Switch = 3;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 4e0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 4e4:	6e c2       	rjmp	.+1244   	; 0x9c2 <__stack+0xc3>
 4e6:	a4 e1       	ldi	r26, 0x14	; 20
 4e8:	b1 e0       	ldi	r27, 0x01	; 1
 4ea:	cc e0       	ldi	r28, 0x0C	; 12
 4ec:	d1 e0       	ldi	r29, 0x01	; 1
 4ee:	e2 e0       	ldi	r30, 0x02	; 2
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	4c e1       	ldi	r20, 0x1C	; 28
 4f4:	51 e0       	ldi	r21, 0x01	; 1
				{
					VT1 = first_digits[k] - '0';
					VT2 = secon_digits[k] - '0';
					if (VT1==1 || VT2==1)
					{
						final_digits[k] = '1';
 4f6:	71 e3       	ldi	r23, 0x31	; 49
					}
					else
					{
						final_digits[k] = '0';
 4f8:	60 e3       	ldi	r22, 0x30	; 48
				break;
				
				case 6:
				for (k=0; k<8;k++)
				{
					VT1 = first_digits[k] - '0';
 4fa:	8d 91       	ld	r24, X+
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	c0 97       	sbiw	r24, 0x30	; 48
					VT2 = secon_digits[k] - '0';
 500:	29 91       	ld	r18, Y+
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	20 53       	subi	r18, 0x30	; 48
 506:	31 09       	sbc	r19, r1
					if (VT1==1 || VT2==1)
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	91 05       	cpc	r25, r1
 50c:	19 f0       	breq	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	21 30       	cpi	r18, 0x01	; 1
 510:	31 05       	cpc	r19, r1
 512:	11 f4       	brne	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
					{
						final_digits[k] = '1';
 514:	70 83       	st	Z, r23
 516:	01 c0       	rjmp	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
					}
					else
					{
						final_digits[k] = '0';
 518:	60 83       	st	Z, r22
 51a:	31 96       	adiw	r30, 0x01	; 1
				}
				First_Second_Switch = 3;
				break;
				
				case 6:
				for (k=0; k<8;k++)
 51c:	a4 17       	cp	r26, r20
 51e:	b5 07       	cpc	r27, r21
 520:	61 f7       	brne	.-40     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 522:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <VT1+0x1>
 526:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <VT1>
 52a:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <VT2+0x1>
 52e:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <VT2>
 532:	88 e0       	ldi	r24, 0x08	; 8
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 53a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
					else
					{
						final_digits[k] = '0';
					}
				}
				First_Second_Switch = 3;
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 546:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 54a:	3b c2       	rjmp	.+1142   	; 0x9c2 <__stack+0xc3>
 54c:	a4 e1       	ldi	r26, 0x14	; 20
 54e:	b1 e0       	ldi	r27, 0x01	; 1
 550:	cc e0       	ldi	r28, 0x0C	; 12
 552:	d1 e0       	ldi	r29, 0x01	; 1
 554:	e2 e0       	ldi	r30, 0x02	; 2
 556:	f1 e0       	ldi	r31, 0x01	; 1
 558:	6c e1       	ldi	r22, 0x1C	; 28
 55a:	71 e0       	ldi	r23, 0x01	; 1
				case 7:
				for (k=0; k<8;k++)
				{
					VT1 = first_digits[k] - '0';
					VT2 = secon_digits[k] - '0';
					if (VT1==1 != VT2==1)
 55c:	01 e0       	ldi	r16, 0x01	; 1
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	d1 2c       	mov	r13, r1
 562:	e1 2c       	mov	r14, r1
					{
						final_digits[k] = '1';
					}
					else
					{
						final_digits[k] = '0';
 564:	0f 2e       	mov	r0, r31
 566:	f0 e3       	ldi	r31, 0x30	; 48
 568:	cf 2e       	mov	r12, r31
 56a:	f0 2d       	mov	r31, r0
				{
					VT1 = first_digits[k] - '0';
					VT2 = secon_digits[k] - '0';
					if (VT1==1 != VT2==1)
					{
						final_digits[k] = '1';
 56c:	0f 2e       	mov	r0, r31
 56e:	f1 e3       	ldi	r31, 0x31	; 49
 570:	ff 2e       	mov	r15, r31
 572:	f0 2d       	mov	r31, r0
				break;
				
				case 7:
				for (k=0; k<8;k++)
				{
					VT1 = first_digits[k] - '0';
 574:	2d 91       	ld	r18, X+
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	20 53       	subi	r18, 0x30	; 48
 57a:	31 09       	sbc	r19, r1
					VT2 = secon_digits[k] - '0';
 57c:	89 91       	ld	r24, Y+
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	c0 97       	sbiw	r24, 0x30	; 48
					if (VT1==1 != VT2==1)
 582:	40 2f       	mov	r20, r16
 584:	51 2f       	mov	r21, r17
 586:	21 30       	cpi	r18, 0x01	; 1
 588:	31 05       	cpc	r19, r1
 58a:	11 f0       	breq	.+4      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 58c:	4d 2d       	mov	r20, r13
 58e:	5e 2d       	mov	r21, r14
 590:	84 17       	cp	r24, r20
 592:	95 07       	cpc	r25, r21
 594:	11 f0       	breq	.+4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
					{
						final_digits[k] = '1';
 596:	f0 82       	st	Z, r15
 598:	01 c0       	rjmp	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
					}
					else
					{
						final_digits[k] = '0';
 59a:	c0 82       	st	Z, r12
 59c:	31 96       	adiw	r30, 0x01	; 1
				}
				First_Second_Switch = 3;
				break;
				
				case 7:
				for (k=0; k<8;k++)
 59e:	a6 17       	cp	r26, r22
 5a0:	b7 07       	cpc	r27, r23
 5a2:	41 f7       	brne	.-48     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 5a4:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <VT1+0x1>
 5a8:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <VT1>
 5ac:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <VT2+0x1>
 5b0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <VT2>
 5b4:	88 e0       	ldi	r24, 0x08	; 8
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 5bc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
					else
					{
						final_digits[k] = '0';
					}
				}
				First_Second_Switch = 3;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 5c8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 5cc:	fa c1       	rjmp	.+1012   	; 0x9c2 <__stack+0xc3>
 5ce:	e4 e1       	ldi	r30, 0x14	; 20
 5d0:	f1 e0       	ldi	r31, 0x01	; 1
 5d2:	cc e2       	ldi	r28, 0x2C	; 44
 5d4:	d1 e0       	ldi	r29, 0x01	; 1
 5d6:	ac e0       	ldi	r26, 0x0C	; 12
 5d8:	b1 e0       	ldi	r27, 0x01	; 1
 5da:	0c e1       	ldi	r16, 0x1C	; 28
 5dc:	11 e0       	ldi	r17, 0x01	; 1
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	70 e0       	ldi	r23, 0x00	; 0
				case 4:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
 5e6:	21 91       	ld	r18, Z+
 5e8:	89 91       	ld	r24, Y+
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	c0 97       	sbiw	r24, 0x30	; 48
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	20 53       	subi	r18, 0x30	; 48
 5f2:	31 09       	sbc	r19, r1
 5f4:	28 9f       	mul	r18, r24
 5f6:	70 01       	movw	r14, r0
 5f8:	29 9f       	mul	r18, r25
 5fa:	f0 0c       	add	r15, r0
 5fc:	38 9f       	mul	r19, r24
 5fe:	f0 0c       	add	r15, r0
 600:	11 24       	eor	r1, r1
 602:	6e 0d       	add	r22, r14
 604:	7f 1d       	adc	r23, r15
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
 606:	2d 91       	ld	r18, X+
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	20 53       	subi	r18, 0x30	; 48
 60c:	31 09       	sbc	r19, r1
 60e:	28 9f       	mul	r18, r24
 610:	70 01       	movw	r14, r0
 612:	29 9f       	mul	r18, r25
 614:	f0 0c       	add	r15, r0
 616:	38 9f       	mul	r19, r24
 618:	f0 0c       	add	r15, r0
 61a:	11 24       	eor	r1, r1
 61c:	4e 0d       	add	r20, r14
 61e:	5f 1d       	adc	r21, r15
				break;
				
				case 4:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
 620:	e0 17       	cp	r30, r16
 622:	f1 07       	cpc	r31, r17
 624:	01 f7       	brne	.-64     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 626:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <VT1+0x1>
 62a:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <VT1>
 62e:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <VT2+0x1>
 632:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <VT2>
 636:	88 e0       	ldi	r24, 0x08	; 8
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 63e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
				}
				VDF = VT1 + VT2;
 642:	64 0f       	add	r22, r20
 644:	75 1f       	adc	r23, r21
 646:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <VDF+0x1>
 64a:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <VDF>
				ul2binstr(VDF, binarystr, 8);
 64e:	07 2e       	mov	r0, r23
 650:	00 0c       	add	r0, r0
 652:	88 0b       	sbc	r24, r24
 654:	99 0b       	sbc	r25, r25
 656:	28 e0       	ldi	r18, 0x08	; 8
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	47 e5       	ldi	r20, 0x57	; 87
 65c:	51 e0       	ldi	r21, 0x01	; 1
 65e:	0e 94 2e 01 	call	0x25c	; 0x25c <ul2binstr>
				First_Second_Switch = 4;
 662:	84 e0       	ldi	r24, 0x04	; 4
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 66a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 66e:	a9 c1       	rjmp	.+850    	; 0x9c2 <__stack+0xc3>
 670:	e4 e1       	ldi	r30, 0x14	; 20
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	6c e2       	ldi	r22, 0x2C	; 44
 676:	71 e0       	ldi	r23, 0x01	; 1
 678:	0f 2e       	mov	r0, r31
 67a:	fc e0       	ldi	r31, 0x0C	; 12
 67c:	cf 2e       	mov	r12, r31
 67e:	f1 e0       	ldi	r31, 0x01	; 1
 680:	df 2e       	mov	r13, r31
 682:	f0 2d       	mov	r31, r0
 684:	0c e1       	ldi	r16, 0x1C	; 28
 686:	11 e0       	ldi	r17, 0x01	; 1
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	50 e0       	ldi	r21, 0x00	; 0
 68c:	a0 e0       	ldi	r26, 0x00	; 0
 68e:	b0 e0       	ldi	r27, 0x00	; 0
				case 2:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
 690:	21 91       	ld	r18, Z+
 692:	eb 01       	movw	r28, r22
 694:	89 91       	ld	r24, Y+
 696:	be 01       	movw	r22, r28
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	c0 97       	sbiw	r24, 0x30	; 48
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	20 53       	subi	r18, 0x30	; 48
 6a0:	31 09       	sbc	r19, r1
 6a2:	28 9f       	mul	r18, r24
 6a4:	70 01       	movw	r14, r0
 6a6:	29 9f       	mul	r18, r25
 6a8:	f0 0c       	add	r15, r0
 6aa:	38 9f       	mul	r19, r24
 6ac:	f0 0c       	add	r15, r0
 6ae:	11 24       	eor	r1, r1
 6b0:	ae 0d       	add	r26, r14
 6b2:	bf 1d       	adc	r27, r15
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
 6b4:	e6 01       	movw	r28, r12
 6b6:	29 91       	ld	r18, Y+
 6b8:	6e 01       	movw	r12, r28
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	20 53       	subi	r18, 0x30	; 48
 6be:	31 09       	sbc	r19, r1
 6c0:	28 9f       	mul	r18, r24
 6c2:	70 01       	movw	r14, r0
 6c4:	29 9f       	mul	r18, r25
 6c6:	f0 0c       	add	r15, r0
 6c8:	38 9f       	mul	r19, r24
 6ca:	f0 0c       	add	r15, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	4e 0d       	add	r20, r14
 6d0:	5f 1d       	adc	r21, r15
				break;
				
				case 2:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
 6d2:	0e 17       	cp	r16, r30
 6d4:	1f 07       	cpc	r17, r31
 6d6:	e1 f6       	brne	.-72     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 6d8:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <VT1+0x1>
 6dc:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <VT1>
 6e0:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <VT2+0x1>
 6e4:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <VT2>
 6e8:	88 e0       	ldi	r24, 0x08	; 8
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 6f0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
				}
				VDF = VT1 * VT2;
 6f4:	a4 9f       	mul	r26, r20
 6f6:	b0 01       	movw	r22, r0
 6f8:	a5 9f       	mul	r26, r21
 6fa:	70 0d       	add	r23, r0
 6fc:	b4 9f       	mul	r27, r20
 6fe:	70 0d       	add	r23, r0
 700:	11 24       	eor	r1, r1
 702:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <VDF+0x1>
 706:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <VDF>
				ul2binstr(VDF, binarystr, 8);
 70a:	07 2e       	mov	r0, r23
 70c:	00 0c       	add	r0, r0
 70e:	88 0b       	sbc	r24, r24
 710:	99 0b       	sbc	r25, r25
 712:	28 e0       	ldi	r18, 0x08	; 8
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	47 e5       	ldi	r20, 0x57	; 87
 718:	51 e0       	ldi	r21, 0x01	; 1
 71a:	0e 94 2e 01 	call	0x25c	; 0x25c <ul2binstr>
				First_Second_Switch = 4;
 71e:	84 e0       	ldi	r24, 0x04	; 4
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 726:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 72a:	4b c1       	rjmp	.+662    	; 0x9c2 <__stack+0xc3>
 72c:	e4 e1       	ldi	r30, 0x14	; 20
 72e:	f1 e0       	ldi	r31, 0x01	; 1
 730:	cc e2       	ldi	r28, 0x2C	; 44
 732:	d1 e0       	ldi	r29, 0x01	; 1
 734:	ac e0       	ldi	r26, 0x0C	; 12
 736:	b1 e0       	ldi	r27, 0x01	; 1
 738:	0c e1       	ldi	r16, 0x1C	; 28
 73a:	11 e0       	ldi	r17, 0x01	; 1
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	90 e0       	ldi	r25, 0x00	; 0
				case 1:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
 744:	41 91       	ld	r20, Z+
 746:	29 91       	ld	r18, Y+
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	20 53       	subi	r18, 0x30	; 48
 74c:	31 09       	sbc	r19, r1
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	40 53       	subi	r20, 0x30	; 48
 752:	51 09       	sbc	r21, r1
 754:	42 9f       	mul	r20, r18
 756:	70 01       	movw	r14, r0
 758:	43 9f       	mul	r20, r19
 75a:	f0 0c       	add	r15, r0
 75c:	52 9f       	mul	r21, r18
 75e:	f0 0c       	add	r15, r0
 760:	11 24       	eor	r1, r1
 762:	8e 0d       	add	r24, r14
 764:	9f 1d       	adc	r25, r15
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
 766:	4d 91       	ld	r20, X+
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	40 53       	subi	r20, 0x30	; 48
 76c:	51 09       	sbc	r21, r1
 76e:	42 9f       	mul	r20, r18
 770:	70 01       	movw	r14, r0
 772:	43 9f       	mul	r20, r19
 774:	f0 0c       	add	r15, r0
 776:	52 9f       	mul	r21, r18
 778:	f0 0c       	add	r15, r0
 77a:	11 24       	eor	r1, r1
 77c:	6e 0d       	add	r22, r14
 77e:	7f 1d       	adc	r23, r15
				break;
				
				case 1:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
 780:	e0 17       	cp	r30, r16
 782:	f1 07       	cpc	r31, r17
 784:	f9 f6       	brne	.-66     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 786:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <VT1+0x1>
 78a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <VT1>
 78e:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <VT2+0x1>
 792:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <VT2>
 796:	28 e0       	ldi	r18, 0x08	; 8
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <k+0x1>
 79e:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <k>
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
				}
				VDF = round(VT1 / VT2);
 7a2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__divmodhi4>
 7a6:	07 2e       	mov	r0, r23
 7a8:	00 0c       	add	r0, r0
 7aa:	88 0b       	sbc	r24, r24
 7ac:	99 0b       	sbc	r25, r25
 7ae:	0e 94 48 06 	call	0xc90	; 0xc90 <__floatsisf>
 7b2:	0e 94 ac 06 	call	0xd58	; 0xd58 <round>
 7b6:	0e 94 10 06 	call	0xc20	; 0xc20 <__fixsfsi>
 7ba:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <VDF+0x1>
 7be:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <VDF>
				ul2binstr(VDF, binarystr, 8);
 7c2:	07 2e       	mov	r0, r23
 7c4:	00 0c       	add	r0, r0
 7c6:	88 0b       	sbc	r24, r24
 7c8:	99 0b       	sbc	r25, r25
 7ca:	28 e0       	ldi	r18, 0x08	; 8
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	47 e5       	ldi	r20, 0x57	; 87
 7d0:	51 e0       	ldi	r21, 0x01	; 1
 7d2:	0e 94 2e 01 	call	0x25c	; 0x25c <ul2binstr>
				First_Second_Switch = 4;
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 7de:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 7e2:	ef c0       	rjmp	.+478    	; 0x9c2 <__stack+0xc3>
 7e4:	e4 e1       	ldi	r30, 0x14	; 20
 7e6:	f1 e0       	ldi	r31, 0x01	; 1
 7e8:	cc e2       	ldi	r28, 0x2C	; 44
 7ea:	d1 e0       	ldi	r29, 0x01	; 1
 7ec:	ac e0       	ldi	r26, 0x0C	; 12
 7ee:	b1 e0       	ldi	r27, 0x01	; 1
 7f0:	0c e1       	ldi	r16, 0x1C	; 28
 7f2:	11 e0       	ldi	r17, 0x01	; 1
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	70 e0       	ldi	r23, 0x00	; 0
				case 3:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
 7fc:	21 91       	ld	r18, Z+
 7fe:	89 91       	ld	r24, Y+
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	c0 97       	sbiw	r24, 0x30	; 48
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	20 53       	subi	r18, 0x30	; 48
 808:	31 09       	sbc	r19, r1
 80a:	28 9f       	mul	r18, r24
 80c:	70 01       	movw	r14, r0
 80e:	29 9f       	mul	r18, r25
 810:	f0 0c       	add	r15, r0
 812:	38 9f       	mul	r19, r24
 814:	f0 0c       	add	r15, r0
 816:	11 24       	eor	r1, r1
 818:	6e 0d       	add	r22, r14
 81a:	7f 1d       	adc	r23, r15
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
 81c:	2d 91       	ld	r18, X+
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	20 53       	subi	r18, 0x30	; 48
 822:	31 09       	sbc	r19, r1
 824:	28 9f       	mul	r18, r24
 826:	70 01       	movw	r14, r0
 828:	29 9f       	mul	r18, r25
 82a:	f0 0c       	add	r15, r0
 82c:	38 9f       	mul	r19, r24
 82e:	f0 0c       	add	r15, r0
 830:	11 24       	eor	r1, r1
 832:	4e 0d       	add	r20, r14
 834:	5f 1d       	adc	r21, r15
				break;
				
				case 3:
				VT1 = 0;
				VT2 = 0;
				for (k=0; k<8;k++)
 836:	0e 17       	cp	r16, r30
 838:	1f 07       	cpc	r17, r31
 83a:	01 f7       	brne	.-64     	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
 83c:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <VT1+0x1>
 840:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <VT1>
 844:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <VT2+0x1>
 848:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <VT2>
 84c:	88 e0       	ldi	r24, 0x08	; 8
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 854:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
				{
					VT1 = (first_digits[k] - '0')*(decimal_base[k] - '0')+VT1;
					VT2 = (secon_digits[k] - '0')*(decimal_base[k] - '0')+VT2;
				}
				VDF = (VT1 - VT2);
 858:	64 1b       	sub	r22, r20
 85a:	75 0b       	sbc	r23, r21
 85c:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <VDF+0x1>
 860:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <VDF>
				ul2binstr(VDF, binarystr, 8);
 864:	07 2e       	mov	r0, r23
 866:	00 0c       	add	r0, r0
 868:	88 0b       	sbc	r24, r24
 86a:	99 0b       	sbc	r25, r25
 86c:	28 e0       	ldi	r18, 0x08	; 8
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	47 e5       	ldi	r20, 0x57	; 87
 872:	51 e0       	ldi	r21, 0x01	; 1
 874:	0e 94 2e 01 	call	0x25c	; 0x25c <ul2binstr>
				First_Second_Switch = 4;
 878:	84 e0       	ldi	r24, 0x04	; 4
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <First_Second_Switch+0x1>
 880:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <First_Second_Switch>
				break;
 884:	9e c0       	rjmp	.+316    	; 0x9c2 <__stack+0xc3>
			}
			break;

			case 'O':
			cmd_LCD(1, 0);
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
 88e:	e4 e1       	ldi	r30, 0x14	; 20
 890:	f1 e0       	ldi	r31, 0x01	; 1
 892:	cc e0       	ldi	r28, 0x0C	; 12
 894:	d1 e0       	ldi	r29, 0x01	; 1
 896:	a2 e0       	ldi	r26, 0x02	; 2
 898:	b1 e0       	ldi	r27, 0x01	; 1
 89a:	2c e1       	ldi	r18, 0x1C	; 28
 89c:	31 e0       	ldi	r19, 0x01	; 1
			for (k=0; k<8;k++)
			{
				first_digits[k]='0';
 89e:	80 e3       	ldi	r24, 0x30	; 48
 8a0:	81 93       	st	Z+, r24
				secon_digits[k]='0';
 8a2:	89 93       	st	Y+, r24
				final_digits[k]='0';
 8a4:	8d 93       	st	X+, r24
			}
			break;

			case 'O':
			cmd_LCD(1, 0);
			for (k=0; k<8;k++)
 8a6:	e2 17       	cp	r30, r18
 8a8:	f3 07       	cpc	r31, r19
 8aa:	d1 f7       	brne	.-12     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
 8ac:	88 e0       	ldi	r24, 0x08	; 8
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <k+0x1>
 8b4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <k>
			{
				first_digits[k]='0';
				secon_digits[k]='0';
				final_digits[k]='0';
			}
			First_Second_Switch = 0;
 8b8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <First_Second_Switch+0x1>
 8bc:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <First_Second_Switch>
			DigitCount = 8;
 8c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <DigitCount+0x1>
 8c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <DigitCount>
			break;
 8c8:	2a c0       	rjmp	.+84     	; 0x91e <__stack+0x1f>
		
			case '1':
			if (First_Second_Switch == 0)
 8ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <First_Second_Switch>
 8ce:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <First_Second_Switch+0x1>
 8d2:	89 2b       	or	r24, r25
 8d4:	31 f4       	brne	.+12     	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
			{
				first_digits[DigitCount] = '1';
 8d6:	f9 01       	movw	r30, r18
 8d8:	ec 5e       	subi	r30, 0xEC	; 236
 8da:	fe 4f       	sbci	r31, 0xFE	; 254
 8dc:	81 e3       	ldi	r24, 0x31	; 49
 8de:	80 83       	st	Z, r24
 8e0:	1e c0       	rjmp	.+60     	; 0x91e <__stack+0x1f>
			} 
			else
			{
				secon_digits[DigitCount] = '1';
 8e2:	f9 01       	movw	r30, r18
 8e4:	e4 5f       	subi	r30, 0xF4	; 244
 8e6:	fe 4f       	sbci	r31, 0xFE	; 254
 8e8:	81 e3       	ldi	r24, 0x31	; 49
 8ea:	80 83       	st	Z, r24
 8ec:	3e c0       	rjmp	.+124    	; 0x96a <__stack+0x6b>
			}
			break;

			case '0':
			if (First_Second_Switch == 0)
 8ee:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <First_Second_Switch>
 8f2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <First_Second_Switch+0x1>
 8f6:	89 2b       	or	r24, r25
 8f8:	31 f4       	brne	.+12     	; 0x906 <__stack+0x7>
			{
				first_digits[DigitCount] = '0';
 8fa:	f9 01       	movw	r30, r18
 8fc:	ec 5e       	subi	r30, 0xEC	; 236
 8fe:	fe 4f       	sbci	r31, 0xFE	; 254
 900:	80 e3       	ldi	r24, 0x30	; 48
 902:	80 83       	st	Z, r24
 904:	0c c0       	rjmp	.+24     	; 0x91e <__stack+0x1f>
			}
			else
			{
				secon_digits[DigitCount] = '0';
 906:	f9 01       	movw	r30, r18
 908:	e4 5f       	subi	r30, 0xF4	; 244
 90a:	fe 4f       	sbci	r31, 0xFE	; 254
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	80 83       	st	Z, r24
 910:	2c c0       	rjmp	.+88     	; 0x96a <__stack+0x6b>
			default:
			break;
		
		}
	}
	if (First_Second_Switch == 0)
 912:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <First_Second_Switch>
 916:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <First_Second_Switch+0x1>
 91a:	89 2b       	or	r24, r25
 91c:	31 f5       	brne	.+76     	; 0x96a <__stack+0x6b>
	{
		cmd_LCD(0x80, 0);
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	80 e8       	ldi	r24, 0x80	; 128
 922:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[0], 1);
 926:	c4 e1       	ldi	r28, 0x14	; 20
 928:	d1 e0       	ldi	r29, 0x01	; 1
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	88 81       	ld	r24, Y
 92e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[1], 1);
 932:	61 e0       	ldi	r22, 0x01	; 1
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[2], 1);
 93a:	61 e0       	ldi	r22, 0x01	; 1
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[3], 1);
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[4], 1);
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	8c 81       	ldd	r24, Y+4	; 0x04
 94e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[5], 1);
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	8d 81       	ldd	r24, Y+5	; 0x05
 956:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[6], 1);
 95a:	61 e0       	ldi	r22, 0x01	; 1
 95c:	8e 81       	ldd	r24, Y+6	; 0x06
 95e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(first_digits[7], 1);
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	8f 81       	ldd	r24, Y+7	; 0x07
 966:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
	}
	if (First_Second_Switch == 1)
 96a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <First_Second_Switch>
 96e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <First_Second_Switch+0x1>
 972:	01 97       	sbiw	r24, 0x01	; 1
 974:	31 f5       	brne	.+76     	; 0x9c2 <__stack+0xc3>
	{
		cmd_LCD(0xC0, 0);
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	80 ec       	ldi	r24, 0xC0	; 192
 97a:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[0], 1);
 97e:	cc e0       	ldi	r28, 0x0C	; 12
 980:	d1 e0       	ldi	r29, 0x01	; 1
 982:	61 e0       	ldi	r22, 0x01	; 1
 984:	88 81       	ld	r24, Y
 986:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[1], 1);
 98a:	61 e0       	ldi	r22, 0x01	; 1
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[2], 1);
 992:	61 e0       	ldi	r22, 0x01	; 1
 994:	8a 81       	ldd	r24, Y+2	; 0x02
 996:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[3], 1);
 99a:	61 e0       	ldi	r22, 0x01	; 1
 99c:	8b 81       	ldd	r24, Y+3	; 0x03
 99e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[4], 1);
 9a2:	61 e0       	ldi	r22, 0x01	; 1
 9a4:	8c 81       	ldd	r24, Y+4	; 0x04
 9a6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[5], 1);
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	8d 81       	ldd	r24, Y+5	; 0x05
 9ae:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[6], 1);
 9b2:	61 e0       	ldi	r22, 0x01	; 1
 9b4:	8e 81       	ldd	r24, Y+6	; 0x06
 9b6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(secon_digits[7], 1);
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	8f 81       	ldd	r24, Y+7	; 0x07
 9be:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
	}
	if (First_Second_Switch == 3)
 9c2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <First_Second_Switch>
 9c6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <First_Second_Switch+0x1>
 9ca:	03 97       	sbiw	r24, 0x03	; 3
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <__stack+0xd1>
 9ce:	52 c0       	rjmp	.+164    	; 0xa74 <__stack+0x175>
	{
		cmd_LCD(0x80,0);
 9d0:	60 e0       	ldi	r22, 0x00	; 0
 9d2:	80 e8       	ldi	r24, 0x80	; 128
 9d4:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('R',1);
 9d8:	61 e0       	ldi	r22, 0x01	; 1
 9da:	82 e5       	ldi	r24, 0x52	; 82
 9dc:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('e',1);
 9e0:	61 e0       	ldi	r22, 0x01	; 1
 9e2:	85 e6       	ldi	r24, 0x65	; 101
 9e4:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('s',1);
 9e8:	61 e0       	ldi	r22, 0x01	; 1
 9ea:	83 e7       	ldi	r24, 0x73	; 115
 9ec:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('u',1);
 9f0:	61 e0       	ldi	r22, 0x01	; 1
 9f2:	85 e7       	ldi	r24, 0x75	; 117
 9f4:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('l',1);
 9f8:	61 e0       	ldi	r22, 0x01	; 1
 9fa:	8c e6       	ldi	r24, 0x6C	; 108
 9fc:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('t',1);
 a00:	61 e0       	ldi	r22, 0x01	; 1
 a02:	84 e7       	ldi	r24, 0x74	; 116
 a04:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('a',1);
 a08:	61 e0       	ldi	r22, 0x01	; 1
 a0a:	81 e6       	ldi	r24, 0x61	; 97
 a0c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('d',1);
 a10:	61 e0       	ldi	r22, 0x01	; 1
 a12:	84 e6       	ldi	r24, 0x64	; 100
 a14:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('o',1);
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	8f e6       	ldi	r24, 0x6F	; 111
 a1c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(':',1);
 a20:	61 e0       	ldi	r22, 0x01	; 1
 a22:	8a e3       	ldi	r24, 0x3A	; 58
 a24:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(0xC0, 0);
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	80 ec       	ldi	r24, 0xC0	; 192
 a2c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[0], 1);
 a30:	c2 e0       	ldi	r28, 0x02	; 2
 a32:	d1 e0       	ldi	r29, 0x01	; 1
 a34:	61 e0       	ldi	r22, 0x01	; 1
 a36:	88 81       	ld	r24, Y
 a38:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[1], 1);
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
 a40:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[2], 1);
 a44:	61 e0       	ldi	r22, 0x01	; 1
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[3], 1);
 a4c:	61 e0       	ldi	r22, 0x01	; 1
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[4], 1);
 a54:	61 e0       	ldi	r22, 0x01	; 1
 a56:	8c 81       	ldd	r24, Y+4	; 0x04
 a58:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[5], 1);
 a5c:	61 e0       	ldi	r22, 0x01	; 1
 a5e:	8d 81       	ldd	r24, Y+5	; 0x05
 a60:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[6], 1);
 a64:	61 e0       	ldi	r22, 0x01	; 1
 a66:	8e 81       	ldd	r24, Y+6	; 0x06
 a68:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(final_digits[7], 1);
 a6c:	61 e0       	ldi	r22, 0x01	; 1
 a6e:	8f 81       	ldd	r24, Y+7	; 0x07
 a70:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
	}
	if (First_Second_Switch == 4)
 a74:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <First_Second_Switch>
 a78:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <First_Second_Switch+0x1>
 a7c:	04 97       	sbiw	r24, 0x04	; 4
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__stack+0x183>
 a80:	52 c0       	rjmp	.+164    	; 0xb26 <__stack+0x227>
	{
		cmd_LCD(0x80,0);
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	80 e8       	ldi	r24, 0x80	; 128
 a86:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('R',1);
 a8a:	61 e0       	ldi	r22, 0x01	; 1
 a8c:	82 e5       	ldi	r24, 0x52	; 82
 a8e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('e',1);
 a92:	61 e0       	ldi	r22, 0x01	; 1
 a94:	85 e6       	ldi	r24, 0x65	; 101
 a96:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('s',1);
 a9a:	61 e0       	ldi	r22, 0x01	; 1
 a9c:	83 e7       	ldi	r24, 0x73	; 115
 a9e:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('u',1);
 aa2:	61 e0       	ldi	r22, 0x01	; 1
 aa4:	85 e7       	ldi	r24, 0x75	; 117
 aa6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('l',1);
 aaa:	61 e0       	ldi	r22, 0x01	; 1
 aac:	8c e6       	ldi	r24, 0x6C	; 108
 aae:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('t',1);
 ab2:	61 e0       	ldi	r22, 0x01	; 1
 ab4:	84 e7       	ldi	r24, 0x74	; 116
 ab6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('a',1);
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	81 e6       	ldi	r24, 0x61	; 97
 abe:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('d',1);
 ac2:	61 e0       	ldi	r22, 0x01	; 1
 ac4:	84 e6       	ldi	r24, 0x64	; 100
 ac6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD('o',1);
 aca:	61 e0       	ldi	r22, 0x01	; 1
 acc:	8f e6       	ldi	r24, 0x6F	; 111
 ace:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(':',1);
 ad2:	61 e0       	ldi	r22, 0x01	; 1
 ad4:	8a e3       	ldi	r24, 0x3A	; 58
 ad6:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(0xC0, 0);
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	80 ec       	ldi	r24, 0xC0	; 192
 ade:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[0], 1);
 ae2:	c7 e5       	ldi	r28, 0x57	; 87
 ae4:	d1 e0       	ldi	r29, 0x01	; 1
 ae6:	61 e0       	ldi	r22, 0x01	; 1
 ae8:	88 81       	ld	r24, Y
 aea:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[1], 1);
 aee:	61 e0       	ldi	r22, 0x01	; 1
 af0:	89 81       	ldd	r24, Y+1	; 0x01
 af2:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[2], 1);
 af6:	61 e0       	ldi	r22, 0x01	; 1
 af8:	8a 81       	ldd	r24, Y+2	; 0x02
 afa:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[3], 1);
 afe:	61 e0       	ldi	r22, 0x01	; 1
 b00:	8b 81       	ldd	r24, Y+3	; 0x03
 b02:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[4], 1);
 b06:	61 e0       	ldi	r22, 0x01	; 1
 b08:	8c 81       	ldd	r24, Y+4	; 0x04
 b0a:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[5], 1);
 b0e:	61 e0       	ldi	r22, 0x01	; 1
 b10:	8d 81       	ldd	r24, Y+5	; 0x05
 b12:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[6], 1);
 b16:	61 e0       	ldi	r22, 0x01	; 1
 b18:	8e 81       	ldd	r24, Y+6	; 0x06
 b1a:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
		cmd_LCD(binarystr[7], 1);
 b1e:	61 e0       	ldi	r22, 0x01	; 1
 b20:	8f 81       	ldd	r24, Y+7	; 0x07
 b22:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
	}
}
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	cf 90       	pop	r12
 b36:	08 95       	ret

00000b38 <main>:

int main(void)
{
	DDRD  = 0xFF;
 b38:	8f ef       	ldi	r24, 0xFF	; 255
 b3a:	8a b9       	out	0x0a, r24	; 10
	DDRC  = 0xFF;
 b3c:	87 b9       	out	0x07, r24	; 7
	DDRB  = 0x00;
 b3e:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
 b40:	85 b9       	out	0x05, r24	; 5
	inic_LCD_4bits(); //inicializa o LCD
 b42:	0e 94 b6 00 	call	0x16c	; 0x16c <inic_LCD_4bits>
	escreve_LCD("Paivox's Calc");
 b46:	84 e3       	ldi	r24, 0x34	; 52
 b48:	91 e0       	ldi	r25, 0x01	; 1
 b4a:	0e 94 1e 01 	call	0x23c	; 0x23c <escreve_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b4e:	2f ef       	ldi	r18, 0xFF	; 255
 b50:	87 e8       	ldi	r24, 0x87	; 135
 b52:	93 e1       	ldi	r25, 0x13	; 19
 b54:	21 50       	subi	r18, 0x01	; 1
 b56:	80 40       	sbci	r24, 0x00	; 0
 b58:	90 40       	sbci	r25, 0x00	; 0
 b5a:	e1 f7       	brne	.-8      	; 0xb54 <main+0x1c>
 b5c:	00 c0       	rjmp	.+0      	; 0xb5e <main+0x26>
 b5e:	00 00       	nop
	_delay_ms(400);
	cmd_LCD(1, 0);
 b60:	60 e0       	ldi	r22, 0x00	; 0
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
	cmd_LCD(0x80,0);
 b68:	60 e0       	ldi	r22, 0x00	; 0
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	0e 94 7f 00 	call	0xfe	; 0xfe <cmd_LCD>
	Calculator(ToSend, 0);
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	70 e0       	ldi	r23, 0x00	; 0
 b74:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ToSend>
 b78:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Calculator>
    while(1)
    {
		for (x=0;x<4;x++)
 b7c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <x+0x1>
 b80:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <x>
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTD = ScanBytes[x];
 b88:	fc 01       	movw	r30, r24
 b8a:	ee 5b       	subi	r30, 0xBE	; 190
 b8c:	fe 4f       	sbci	r31, 0xFE	; 254
 b8e:	80 81       	ld	r24, Z
 b90:	8b b9       	out	0x0b, r24	; 11
			for (y=0;y<4;y++)
 b92:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <y+0x1>
 b96:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <y>
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	90 e0       	ldi	r25, 0x00	; 0
			{
				if (TST_BIT(PINB, y)==0)
 b9e:	23 b1       	in	r18, 0x03	; 3
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	08 2e       	mov	r0, r24
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <main+0x72>
 ba6:	35 95       	asr	r19
 ba8:	27 95       	ror	r18
 baa:	0a 94       	dec	r0
 bac:	e2 f7       	brpl	.-8      	; 0xba6 <main+0x6e>
 bae:	20 fd       	sbrc	r18, 0
 bb0:	1d c0       	rjmp	.+58     	; 0xbec <main+0xb4>
				{
				ToSend = PadDigits[x][y];
 bb2:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <x>
 bb6:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <x+0x1>
 bba:	22 0f       	add	r18, r18
 bbc:	33 1f       	adc	r19, r19
 bbe:	22 0f       	add	r18, r18
 bc0:	33 1f       	adc	r19, r19
 bc2:	24 5e       	subi	r18, 0xE4	; 228
 bc4:	3e 4f       	sbci	r19, 0xFE	; 254
 bc6:	f9 01       	movw	r30, r18
 bc8:	e8 0f       	add	r30, r24
 bca:	f9 1f       	adc	r31, r25
 bcc:	80 81       	ld	r24, Z
 bce:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <ToSend>
				Calculator(ToSend, 1);
 bd2:	61 e0       	ldi	r22, 0x01	; 1
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Calculator>
 bda:	2f ef       	ldi	r18, 0xFF	; 255
 bdc:	89 e6       	ldi	r24, 0x69	; 105
 bde:	98 e1       	ldi	r25, 0x18	; 24
 be0:	21 50       	subi	r18, 0x01	; 1
 be2:	80 40       	sbci	r24, 0x00	; 0
 be4:	90 40       	sbci	r25, 0x00	; 0
 be6:	e1 f7       	brne	.-8      	; 0xbe0 <main+0xa8>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <main+0xb2>
 bea:	00 00       	nop
    while(1)
    {
		for (x=0;x<4;x++)
		{
			PORTD = ScanBytes[x];
			for (y=0;y<4;y++)
 bec:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <y>
 bf0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <y+0x1>
 bf4:	01 96       	adiw	r24, 0x01	; 1
 bf6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <y+0x1>
 bfa:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <y>
 bfe:	84 30       	cpi	r24, 0x04	; 4
 c00:	91 05       	cpc	r25, r1
 c02:	6c f2       	brlt	.-102    	; 0xb9e <main+0x66>
	cmd_LCD(1, 0);
	cmd_LCD(0x80,0);
	Calculator(ToSend, 0);
    while(1)
    {
		for (x=0;x<4;x++)
 c04:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <x>
 c08:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <x+0x1>
 c0c:	01 96       	adiw	r24, 0x01	; 1
 c0e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <x+0x1>
 c12:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <x>
 c16:	84 30       	cpi	r24, 0x04	; 4
 c18:	91 05       	cpc	r25, r1
 c1a:	0c f4       	brge	.+2      	; 0xc1e <main+0xe6>
 c1c:	b5 cf       	rjmp	.-150    	; 0xb88 <main+0x50>
 c1e:	ae cf       	rjmp	.-164    	; 0xb7c <main+0x44>

00000c20 <__fixsfsi>:
 c20:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
 c24:	68 94       	set
 c26:	b1 11       	cpse	r27, r1
 c28:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_szero>
 c2c:	08 95       	ret

00000c2e <__fixunssfsi>:
 c2e:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fp_splitA>
 c32:	88 f0       	brcs	.+34     	; 0xc56 <__fixunssfsi+0x28>
 c34:	9f 57       	subi	r25, 0x7F	; 127
 c36:	98 f0       	brcs	.+38     	; 0xc5e <__fixunssfsi+0x30>
 c38:	b9 2f       	mov	r27, r25
 c3a:	99 27       	eor	r25, r25
 c3c:	b7 51       	subi	r27, 0x17	; 23
 c3e:	b0 f0       	brcs	.+44     	; 0xc6c <__fixunssfsi+0x3e>
 c40:	e1 f0       	breq	.+56     	; 0xc7a <__fixunssfsi+0x4c>
 c42:	66 0f       	add	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	1a f0       	brmi	.+6      	; 0xc52 <__fixunssfsi+0x24>
 c4c:	ba 95       	dec	r27
 c4e:	c9 f7       	brne	.-14     	; 0xc42 <__fixunssfsi+0x14>
 c50:	14 c0       	rjmp	.+40     	; 0xc7a <__fixunssfsi+0x4c>
 c52:	b1 30       	cpi	r27, 0x01	; 1
 c54:	91 f0       	breq	.+36     	; 0xc7a <__fixunssfsi+0x4c>
 c56:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_zero>
 c5a:	b1 e0       	ldi	r27, 0x01	; 1
 c5c:	08 95       	ret
 c5e:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_zero>
 c62:	67 2f       	mov	r22, r23
 c64:	78 2f       	mov	r23, r24
 c66:	88 27       	eor	r24, r24
 c68:	b8 5f       	subi	r27, 0xF8	; 248
 c6a:	39 f0       	breq	.+14     	; 0xc7a <__fixunssfsi+0x4c>
 c6c:	b9 3f       	cpi	r27, 0xF9	; 249
 c6e:	cc f3       	brlt	.-14     	; 0xc62 <__fixunssfsi+0x34>
 c70:	86 95       	lsr	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	b3 95       	inc	r27
 c78:	d9 f7       	brne	.-10     	; 0xc70 <__fixunssfsi+0x42>
 c7a:	3e f4       	brtc	.+14     	; 0xc8a <__fixunssfsi+0x5c>
 c7c:	90 95       	com	r25
 c7e:	80 95       	com	r24
 c80:	70 95       	com	r23
 c82:	61 95       	neg	r22
 c84:	7f 4f       	sbci	r23, 0xFF	; 255
 c86:	8f 4f       	sbci	r24, 0xFF	; 255
 c88:	9f 4f       	sbci	r25, 0xFF	; 255
 c8a:	08 95       	ret

00000c8c <__floatunsisf>:
 c8c:	e8 94       	clt
 c8e:	09 c0       	rjmp	.+18     	; 0xca2 <__floatsisf+0x12>

00000c90 <__floatsisf>:
 c90:	97 fb       	bst	r25, 7
 c92:	3e f4       	brtc	.+14     	; 0xca2 <__floatsisf+0x12>
 c94:	90 95       	com	r25
 c96:	80 95       	com	r24
 c98:	70 95       	com	r23
 c9a:	61 95       	neg	r22
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	99 23       	and	r25, r25
 ca4:	a9 f0       	breq	.+42     	; 0xcd0 <__floatsisf+0x40>
 ca6:	f9 2f       	mov	r31, r25
 ca8:	96 e9       	ldi	r25, 0x96	; 150
 caa:	bb 27       	eor	r27, r27
 cac:	93 95       	inc	r25
 cae:	f6 95       	lsr	r31
 cb0:	87 95       	ror	r24
 cb2:	77 95       	ror	r23
 cb4:	67 95       	ror	r22
 cb6:	b7 95       	ror	r27
 cb8:	f1 11       	cpse	r31, r1
 cba:	f8 cf       	rjmp	.-16     	; 0xcac <__floatsisf+0x1c>
 cbc:	fa f4       	brpl	.+62     	; 0xcfc <__floatsisf+0x6c>
 cbe:	bb 0f       	add	r27, r27
 cc0:	11 f4       	brne	.+4      	; 0xcc6 <__floatsisf+0x36>
 cc2:	60 ff       	sbrs	r22, 0
 cc4:	1b c0       	rjmp	.+54     	; 0xcfc <__floatsisf+0x6c>
 cc6:	6f 5f       	subi	r22, 0xFF	; 255
 cc8:	7f 4f       	sbci	r23, 0xFF	; 255
 cca:	8f 4f       	sbci	r24, 0xFF	; 255
 ccc:	9f 4f       	sbci	r25, 0xFF	; 255
 cce:	16 c0       	rjmp	.+44     	; 0xcfc <__floatsisf+0x6c>
 cd0:	88 23       	and	r24, r24
 cd2:	11 f0       	breq	.+4      	; 0xcd8 <__floatsisf+0x48>
 cd4:	96 e9       	ldi	r25, 0x96	; 150
 cd6:	11 c0       	rjmp	.+34     	; 0xcfa <__floatsisf+0x6a>
 cd8:	77 23       	and	r23, r23
 cda:	21 f0       	breq	.+8      	; 0xce4 <__floatsisf+0x54>
 cdc:	9e e8       	ldi	r25, 0x8E	; 142
 cde:	87 2f       	mov	r24, r23
 ce0:	76 2f       	mov	r23, r22
 ce2:	05 c0       	rjmp	.+10     	; 0xcee <__floatsisf+0x5e>
 ce4:	66 23       	and	r22, r22
 ce6:	71 f0       	breq	.+28     	; 0xd04 <__floatsisf+0x74>
 ce8:	96 e8       	ldi	r25, 0x86	; 134
 cea:	86 2f       	mov	r24, r22
 cec:	70 e0       	ldi	r23, 0x00	; 0
 cee:	60 e0       	ldi	r22, 0x00	; 0
 cf0:	2a f0       	brmi	.+10     	; 0xcfc <__floatsisf+0x6c>
 cf2:	9a 95       	dec	r25
 cf4:	66 0f       	add	r22, r22
 cf6:	77 1f       	adc	r23, r23
 cf8:	88 1f       	adc	r24, r24
 cfa:	da f7       	brpl	.-10     	; 0xcf2 <__floatsisf+0x62>
 cfc:	88 0f       	add	r24, r24
 cfe:	96 95       	lsr	r25
 d00:	87 95       	ror	r24
 d02:	97 f9       	bld	r25, 7
 d04:	08 95       	ret

00000d06 <__fp_split3>:
 d06:	57 fd       	sbrc	r21, 7
 d08:	90 58       	subi	r25, 0x80	; 128
 d0a:	44 0f       	add	r20, r20
 d0c:	55 1f       	adc	r21, r21
 d0e:	59 f0       	breq	.+22     	; 0xd26 <__fp_splitA+0x10>
 d10:	5f 3f       	cpi	r21, 0xFF	; 255
 d12:	71 f0       	breq	.+28     	; 0xd30 <__fp_splitA+0x1a>
 d14:	47 95       	ror	r20

00000d16 <__fp_splitA>:
 d16:	88 0f       	add	r24, r24
 d18:	97 fb       	bst	r25, 7
 d1a:	99 1f       	adc	r25, r25
 d1c:	61 f0       	breq	.+24     	; 0xd36 <__fp_splitA+0x20>
 d1e:	9f 3f       	cpi	r25, 0xFF	; 255
 d20:	79 f0       	breq	.+30     	; 0xd40 <__fp_splitA+0x2a>
 d22:	87 95       	ror	r24
 d24:	08 95       	ret
 d26:	12 16       	cp	r1, r18
 d28:	13 06       	cpc	r1, r19
 d2a:	14 06       	cpc	r1, r20
 d2c:	55 1f       	adc	r21, r21
 d2e:	f2 cf       	rjmp	.-28     	; 0xd14 <__fp_split3+0xe>
 d30:	46 95       	lsr	r20
 d32:	f1 df       	rcall	.-30     	; 0xd16 <__fp_splitA>
 d34:	08 c0       	rjmp	.+16     	; 0xd46 <__fp_splitA+0x30>
 d36:	16 16       	cp	r1, r22
 d38:	17 06       	cpc	r1, r23
 d3a:	18 06       	cpc	r1, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	f1 cf       	rjmp	.-30     	; 0xd22 <__fp_splitA+0xc>
 d40:	86 95       	lsr	r24
 d42:	71 05       	cpc	r23, r1
 d44:	61 05       	cpc	r22, r1
 d46:	08 94       	sec
 d48:	08 95       	ret

00000d4a <__fp_zero>:
 d4a:	e8 94       	clt

00000d4c <__fp_szero>:
 d4c:	bb 27       	eor	r27, r27
 d4e:	66 27       	eor	r22, r22
 d50:	77 27       	eor	r23, r23
 d52:	cb 01       	movw	r24, r22
 d54:	97 f9       	bld	r25, 7
 d56:	08 95       	ret

00000d58 <round>:
 d58:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fp_splitA>
 d5c:	e8 f0       	brcs	.+58     	; 0xd98 <round+0x40>
 d5e:	9e 37       	cpi	r25, 0x7E	; 126
 d60:	e8 f0       	brcs	.+58     	; 0xd9c <round+0x44>
 d62:	96 39       	cpi	r25, 0x96	; 150
 d64:	b8 f4       	brcc	.+46     	; 0xd94 <round+0x3c>
 d66:	9e 38       	cpi	r25, 0x8E	; 142
 d68:	48 f4       	brcc	.+18     	; 0xd7c <round+0x24>
 d6a:	67 2f       	mov	r22, r23
 d6c:	78 2f       	mov	r23, r24
 d6e:	88 27       	eor	r24, r24
 d70:	98 5f       	subi	r25, 0xF8	; 248
 d72:	f9 cf       	rjmp	.-14     	; 0xd66 <round+0xe>
 d74:	86 95       	lsr	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	93 95       	inc	r25
 d7c:	95 39       	cpi	r25, 0x95	; 149
 d7e:	d0 f3       	brcs	.-12     	; 0xd74 <round+0x1c>
 d80:	b6 2f       	mov	r27, r22
 d82:	b1 70       	andi	r27, 0x01	; 1
 d84:	6b 0f       	add	r22, r27
 d86:	71 1d       	adc	r23, r1
 d88:	81 1d       	adc	r24, r1
 d8a:	20 f4       	brcc	.+8      	; 0xd94 <round+0x3c>
 d8c:	87 95       	ror	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	93 95       	inc	r25
 d94:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_mintl>
 d98:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_mpack>
 d9c:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_szero>

00000da0 <__fp_mintl>:
 da0:	88 23       	and	r24, r24
 da2:	71 f4       	brne	.+28     	; 0xdc0 <__fp_mintl+0x20>
 da4:	77 23       	and	r23, r23
 da6:	21 f0       	breq	.+8      	; 0xdb0 <__fp_mintl+0x10>
 da8:	98 50       	subi	r25, 0x08	; 8
 daa:	87 2b       	or	r24, r23
 dac:	76 2f       	mov	r23, r22
 dae:	07 c0       	rjmp	.+14     	; 0xdbe <__fp_mintl+0x1e>
 db0:	66 23       	and	r22, r22
 db2:	11 f4       	brne	.+4      	; 0xdb8 <__fp_mintl+0x18>
 db4:	99 27       	eor	r25, r25
 db6:	0d c0       	rjmp	.+26     	; 0xdd2 <__fp_mintl+0x32>
 db8:	90 51       	subi	r25, 0x10	; 16
 dba:	86 2b       	or	r24, r22
 dbc:	70 e0       	ldi	r23, 0x00	; 0
 dbe:	60 e0       	ldi	r22, 0x00	; 0
 dc0:	2a f0       	brmi	.+10     	; 0xdcc <__fp_mintl+0x2c>
 dc2:	9a 95       	dec	r25
 dc4:	66 0f       	add	r22, r22
 dc6:	77 1f       	adc	r23, r23
 dc8:	88 1f       	adc	r24, r24
 dca:	da f7       	brpl	.-10     	; 0xdc2 <__fp_mintl+0x22>
 dcc:	88 0f       	add	r24, r24
 dce:	96 95       	lsr	r25
 dd0:	87 95       	ror	r24
 dd2:	97 f9       	bld	r25, 7
 dd4:	08 95       	ret

00000dd6 <__fp_mpack>:
 dd6:	9f 3f       	cpi	r25, 0xFF	; 255
 dd8:	31 f0       	breq	.+12     	; 0xde6 <__fp_mpack_finite+0xc>

00000dda <__fp_mpack_finite>:
 dda:	91 50       	subi	r25, 0x01	; 1
 ddc:	20 f4       	brcc	.+8      	; 0xde6 <__fp_mpack_finite+0xc>
 dde:	87 95       	ror	r24
 de0:	77 95       	ror	r23
 de2:	67 95       	ror	r22
 de4:	b7 95       	ror	r27
 de6:	88 0f       	add	r24, r24
 de8:	91 1d       	adc	r25, r1
 dea:	96 95       	lsr	r25
 dec:	87 95       	ror	r24
 dee:	97 f9       	bld	r25, 7
 df0:	08 95       	ret

00000df2 <__divmodhi4>:
 df2:	97 fb       	bst	r25, 7
 df4:	07 2e       	mov	r0, r23
 df6:	16 f4       	brtc	.+4      	; 0xdfc <__divmodhi4+0xa>
 df8:	00 94       	com	r0
 dfa:	07 d0       	rcall	.+14     	; 0xe0a <__divmodhi4_neg1>
 dfc:	77 fd       	sbrc	r23, 7
 dfe:	09 d0       	rcall	.+18     	; 0xe12 <__divmodhi4_neg2>
 e00:	0e 94 13 07 	call	0xe26	; 0xe26 <__udivmodhi4>
 e04:	07 fc       	sbrc	r0, 7
 e06:	05 d0       	rcall	.+10     	; 0xe12 <__divmodhi4_neg2>
 e08:	3e f4       	brtc	.+14     	; 0xe18 <__divmodhi4_exit>

00000e0a <__divmodhi4_neg1>:
 e0a:	90 95       	com	r25
 e0c:	81 95       	neg	r24
 e0e:	9f 4f       	sbci	r25, 0xFF	; 255
 e10:	08 95       	ret

00000e12 <__divmodhi4_neg2>:
 e12:	70 95       	com	r23
 e14:	61 95       	neg	r22
 e16:	7f 4f       	sbci	r23, 0xFF	; 255

00000e18 <__divmodhi4_exit>:
 e18:	08 95       	ret

00000e1a <__tablejump2__>:
 e1a:	ee 0f       	add	r30, r30
 e1c:	ff 1f       	adc	r31, r31
 e1e:	05 90       	lpm	r0, Z+
 e20:	f4 91       	lpm	r31, Z
 e22:	e0 2d       	mov	r30, r0
 e24:	09 94       	ijmp

00000e26 <__udivmodhi4>:
 e26:	aa 1b       	sub	r26, r26
 e28:	bb 1b       	sub	r27, r27
 e2a:	51 e1       	ldi	r21, 0x11	; 17
 e2c:	07 c0       	rjmp	.+14     	; 0xe3c <__udivmodhi4_ep>

00000e2e <__udivmodhi4_loop>:
 e2e:	aa 1f       	adc	r26, r26
 e30:	bb 1f       	adc	r27, r27
 e32:	a6 17       	cp	r26, r22
 e34:	b7 07       	cpc	r27, r23
 e36:	10 f0       	brcs	.+4      	; 0xe3c <__udivmodhi4_ep>
 e38:	a6 1b       	sub	r26, r22
 e3a:	b7 0b       	sbc	r27, r23

00000e3c <__udivmodhi4_ep>:
 e3c:	88 1f       	adc	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	5a 95       	dec	r21
 e42:	a9 f7       	brne	.-22     	; 0xe2e <__udivmodhi4_loop>
 e44:	80 95       	com	r24
 e46:	90 95       	com	r25
 e48:	bc 01       	movw	r22, r24
 e4a:	cd 01       	movw	r24, r26
 e4c:	08 95       	ret

00000e4e <_exit>:
 e4e:	f8 94       	cli

00000e50 <__stop_program>:
 e50:	ff cf       	rjmp	.-2      	; 0xe50 <__stop_program>
